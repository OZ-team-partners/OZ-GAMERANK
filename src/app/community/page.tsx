'use client';

import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import type { User } from '@supabase/supabase-js';

import CategoryFilter from './components/CategoryFilter';
import PostModal from './components/PostModal';
import PostList from './components/PostList';
import Pagination from './components/Pagination';
import LoginPrompt from './components/LoginPrompt';
import CommunityHeader from './components/CommunityHeader';
import CommunitySidebar from './components/CommunitySidebar';
import SearchAndWriteBar from './components/SearchAndWriteBar';

import type { CommunityPost, Category, PostFormData, SupabaseError } from './types';
import { 
  filterPostsByCategory, 
  filterPostsBySearch, 
  paginatePosts
} from './utils';

export default function BoardPage() {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [posts, setPosts] = useState<CommunityPost[]>([]);
  const [currentPost, setCurrentPost] = useState<CommunityPost | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<Category>('Ï†ÑÏ≤¥');
  const [currentPage, setCurrentPage] = useState(1);
  const [user, setUser] = useState<User | null>(null);
  const [showLoginPrompt, setShowLoginPrompt] = useState(false);

  // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
  useEffect(() => {
    const getUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      setUser(user);
      
      // Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÍ∞Ä users ÌÖåÏù¥Î∏îÏóê ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥† ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
      if (user) {
        const { data: existingUser } = await supabase
          .from('users')
          .select('user_id')
          .eq('user_id', user.id)
          .single();
        
        if (!existingUser) {
          console.log('users ÌÖåÏù¥Î∏îÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. Ï∂îÍ∞ÄÌï©ÎãàÎã§.');
          const { error: insertError } = await supabase
            .from('users')
            .insert({
              user_id: user.id,
              username: user.user_metadata?.username || user.email?.split('@')[0] || 'Unknown User',
              email: user.email,
              password_hash: 'supabase_auth_managed',
              avatar_url: user.user_metadata?.avatar_url || null,
              join_date: user.created_at,
              role: 'user',
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
          
          if (insertError) {
            console.error('users ÌÖåÏù¥Î∏îÏóê ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä Ïã§Ìå®:', insertError);
          } else {
            console.log('users ÌÖåÏù¥Î∏îÏóê ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä ÏÑ±Í≥µ');
          }
        }
      }
    };

    getUser();

    // Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (_, session) => {
      setUser(session?.user ?? null);
      
      // ÏÑ∏ÏÖò Î≥ÄÍ≤Ω ÏãúÏóêÎèÑ users ÌÖåÏù¥Î∏î ÌôïÏù∏
      if (session?.user) {
        const { data: existingUser } = await supabase
          .from('users')
          .select('user_id')
          .eq('user_id', session.user.id)
          .single();
        
        if (!existingUser) {
          await supabase
            .from('users')
            .insert({
              user_id: session.user.id,
              username: session.user.user_metadata?.username || session.user.email?.split('@')[0] || 'Unknown User',
              email: session.user.email,
              password_hash: 'supabase_auth_managed',
              avatar_url: session.user.user_metadata?.avatar_url || null,
              join_date: session.user.created_at,
              role: 'user',
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
        }
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  // Í≤åÏãúÍ∏Ä Î°úÎìú (Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú)
  useEffect(() => {
    const loadPosts = async () => {
      console.log('üîÑ Í≤åÏãúÍ∏Ä Î°úÎî© ÏãúÏûë...');
      try {
        // Îã®ÏàúÌïú ÏøºÎ¶¨Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÏÑú ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
        console.log('üì° Supabase ÏøºÎ¶¨ Ïã§Ìñâ Ï§ë...');
        // ÏÇ≠Ï†úÎêòÏßÄ ÏïäÏùÄ Í≤åÏãúÍ∏ÄÍ≥º ÏûëÏÑ±Ïûê Ï†ïÎ≥¥Î•º Ìï®Íªò Ï°∞Ìöå
        const { data: posts, error } = await supabase
          .from('commu_post')
          .select(
            `
            *,
            author:users(*)
          `
          )
          .or('is_deleted.is.null,is_deleted.eq.false')
          .order('created_at', { ascending: false })
          .limit(10);

        console.log('üìã ÌïÑÌÑ∞ÎßÅÎêú Í≤åÏãúÍ∏Ä Ï°∞Ìöå Í≤∞Í≥º:', posts);

        console.log('üìä ÏøºÎ¶¨ Í≤∞Í≥º:', { posts, error });

        if (error) {
          console.error('Supabase ÏøºÎ¶¨ Ïò§Î•ò:', {
            message: error.message,
            code: error.code,
            details: error.details,
          });

          // ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÍ±∞ÎÇò Ïò§Î•ò Î∞úÏÉù Ïãú Îπà Î∞∞Ïó¥
          setPosts([]);
          return;
        }

        // postsÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÎìúÎêòÎ©¥ ÏÉÅÌÉúÏóê Ï†ÄÏû•
        if (posts && posts.length > 0) {
          console.log('Î°úÎìúÎêú Í≤åÏãúÍ∏ÄÎì§ (ÏûëÏÑ±Ïûê Ï†ïÎ≥¥ Ìè¨Ìï®):', posts);
          setPosts(posts);
        } else {
          console.log('Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏùå');
          setPosts([]);
        }
      } catch (error) {
        console.error('Í≤åÏãúÍ∏Ä Î°úÎî© Ïã§Ìå®:', error);
        setPosts([]);
      }
    };

    loadPosts();
  }, []);

  // Í≤ÄÏÉâÎêú Í≤åÏãúÍ∏Ä ÌïÑÌÑ∞ÎßÅ
  const categoryFilteredPosts = filterPostsByCategory(posts, selectedCategory);
  const searchFilteredPosts = filterPostsBySearch(categoryFilteredPosts, searchTerm);
  
  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
  const { paginatedPosts, totalPages } = paginatePosts(searchFilteredPosts, currentPage, 10);

  // Í≤åÏãúÍ∏Ä Î≥¥Í∏∞ Î™®Îã¨ Ïó¥Í∏∞
  const openViewModal = (post: CommunityPost) => {
    setCurrentPost(post);
    setIsEditMode(false);
    setIsModalOpen(true);
  };

  // Î≥¥Í∏∞ Î™®ÎìúÏóêÏÑú ÏàòÏ†ï Î™®ÎìúÎ°ú Ï†ÑÌôò
  const switchToEditMode = () => {
    if (!user) {
      setShowLoginPrompt(true);
      return;
    }
    setIsEditMode(true);
  };

  // Í≤åÏãúÍ∏Ä ÏàòÏ†ï Î™®Îã¨ Ïó¥Í∏∞
  const openEditModal = (post: CommunityPost) => {
    // ÎπÑÎ°úÍ∑∏Ïù∏ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏàòÏ†ïÌïòÎ†§Í≥† Ìï† ÎïåÎèÑ Î°úÍ∑∏Ïù∏ ÌîÑÎ°¨ÌîÑÌä∏ ÌëúÏãú
    if (!user) {
      setShowLoginPrompt(true);
      return;
    }

    setCurrentPost(post);
    setIsEditMode(true);
    setIsModalOpen(true);
  };

  // Î™®Îã¨ Îã´Í∏∞
  const closeModal = () => {
    setIsModalOpen(false);
    setCurrentPost(null);
    setIsEditMode(false);
  };

  // Í≤åÏãúÍ∏Ä Ï†ÄÏû•
  const handleSubmit = async (
    formData: PostFormData,
    imagePreview: string
  ) => {
    if (!user) {
      alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }

    try {
      if (isEditMode && currentPost) {
        // Í≤åÏãúÍ∏Ä ÏàòÏ†ï
        const { data: updatedPost, error } = await supabase
          .from('commu_post')
          .update({
            title: formData.title,
            content: formData.content,
            category: formData.category,
            image_url: imagePreview || null,
            updated_at: new Date().toISOString(),
          })
          .eq('post_id', currentPost.id)
          .eq('user_id', user.id) // ÏûëÏÑ±ÏûêÎßå ÏàòÏ†ï Í∞ÄÎä•
          .select(`
            *,
            author:users(*)
          `)
          .single();

        if (error) throw error;

        // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (updatedPost) {
          setPosts((prev) =>
            prev.map((post) =>
              post.id === currentPost.id ? updatedPost : post
            )
          );
        }
      } else {
        // ÏÉà Í≤åÏãúÍ∏Ä ÏûëÏÑ±
        const { data: newPost, error } = await supabase
          .from('commu_post')
          .insert({
            title: formData.title,
            content: formData.content,
            category: formData.category,
            image_url: imagePreview || null,
            user_id: user.id,
            created_at: new Date().toISOString(),
          })
          .select(`
            *,
            author:users(*)
          `)
          .single();

        if (error) throw error;

        // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (newPost) {
          setPosts((prev) => [newPost, ...prev]);
        }
      }

      closeModal();
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä Ï†ÄÏû• Ïã§Ìå®:', error);
      const supabaseError = error as SupabaseError;
      console.error('Error details:', {
        message: supabaseError?.message,
        code: supabaseError?.code,
        details: supabaseError?.details,
        hint: supabaseError?.hint,
      });
      alert(
        `Í≤åÏãúÍ∏Ä Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${
          supabaseError?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'
        }`
      );
    }
  };

  // Î°úÍ∑∏Ïù∏/ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨
  const handleLogin = () => {
    setShowLoginPrompt(false);
    // TODO: Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏ ÎòêÎäî Î°úÍ∑∏Ïù∏ Î™®Îã¨ ÎùÑÏö∞Í∏∞
    window.location.href = '/auth/login';
  };

  const handleSignup = () => {
    setShowLoginPrompt(false);
    // TODO: ÌöåÏõêÍ∞ÄÏûÖ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏ ÎòêÎäî ÌöåÏõêÍ∞ÄÏûÖ Î™®Îã¨ ÎùÑÏö∞Í∏∞
    window.location.href = '/auth/signup';
  };

  // Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
  const handleDelete = async (id: number) => {
    if (!window.confirm('Ï†ïÎßêÎ°ú Ïù¥ Í≤åÏãúÍ∏ÄÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      return;
    }

    if (!user) {
      alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }

    try {
      const { error } = await supabase
        .from('commu_post')
        .update({ is_deleted: true })
        .eq('post_id', id)
        .eq('user_id', user.id); // ÏûëÏÑ±ÏûêÎßå ÏÇ≠Ï†ú Í∞ÄÎä•

      if (error) throw error;

      // Î°úÏª¨ ÏÉÅÌÉúÏóêÏÑú Ï†úÍ±∞
      setPosts((prev) => prev.filter((post) => post.id !== id));
      closeModal();
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      alert('Í≤åÏãúÍ∏Ä ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  const handleWriteClick = () => {
    if (!user) {
      setShowLoginPrompt(true);
    } else {
      setCurrentPost(null);
      setIsEditMode(false);
      setIsModalOpen(true);
    }
  };

  return (
    <div className="m-0 font-sans bg-gradient-to-br from-slate-900 via-slate-900 to-slate-800 text-white min-h-screen">
      <div className="max-w-7xl mx-auto py-8 px-2 sm:px-4 lg:px-6">
        
        <CommunityHeader />
        
        <CategoryFilter
          selectedCategory={selectedCategory}
          onCategoryChange={setSelectedCategory}
        />

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <CommunitySidebar />

          {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
          <div className="lg:col-span-3">
            <SearchAndWriteBar
              searchTerm={searchTerm}
              onSearchChange={setSearchTerm}
              onWriteClick={handleWriteClick}
            />

            <PostList
              posts={paginatedPosts}
              onViewPost={openViewModal}
              onEditPost={openEditModal}
              onDeletePost={handleDelete}
              isAuthenticated={!!user}
              currentUserId={user?.id}
            />

            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
            />
          </div>
        </div>
      </div>

      {/* Í≤åÏãúÍ∏Ä ÏûëÏÑ±/ÏàòÏ†ï Î™®Îã¨ */}
      <PostModal
        isOpen={isModalOpen}
        isEditMode={isEditMode}
        isViewMode={!isEditMode && !!currentPost} // ÏàòÏ†ï Î™®ÎìúÍ∞Ä ÏïÑÎãàÍ≥† Í≤åÏãúÍ∏ÄÏù¥ ÏûàÏúºÎ©¥ Î≥¥Í∏∞ Î™®Îìú
        currentPost={currentPost}
        user={user}
        onClose={closeModal}
        onSubmit={handleSubmit}
        onDelete={handleDelete}
        onEdit={switchToEditMode}
      />

      {/* Î°úÍ∑∏Ïù∏ ÌîÑÎ°¨ÌîÑÌä∏ */}
      <LoginPrompt
        isOpen={showLoginPrompt}
        onClose={() => setShowLoginPrompt(false)}
        onLogin={handleLogin}
        onSignup={handleSignup}
      />
    </div>
  );
}
